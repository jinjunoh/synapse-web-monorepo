import{l as m}from"./index-643c5ae5.js";import{c as I,d as c,e as f,f as $,g as l,h as v,i as N,j as D}from"./SynapseClient-ceb0e6d4.js";import{m as y}from"./index-9c192789.js";import{M as T}from"./mockEntity-fd052684.js";import{m as j}from"./mockSchema-b853deb7.js";import{U as k}from"./index-7db48dfb.js";import{m as E}from"./mockProject-892446d8.js";import{u as S}from"./uniqueId-4d05949d.js";const A=d=>[m.rest.post(`${d}${I}`,async(o,r,t)=>{let n=200;const s=await o.json();let e={reason:"..."};return s?s.name===T?(e.reason="Invalid project name",n=403):e={id:S("syn"),...s}:(n=400,e={reason:`Mock service worker received the following malformed body for PUT ${I} : ${JSON.stringify(s)}`}),r(t.status(n),t.json(e))}),m.rest.get(`${d}${c(":entityId")}`,async(o,r,t)=>{let n=404,s={reason:`Mock Service worker could not find a mock entity with ID ${o.params.entityId}`};const e=y.find(i=>i.id===o.params.entityId);return e&&(s=e.entity,n=200),r(t.status(n),t.json(s))}),m.rest.get(`${d}${f(":entityId")}`,async(o,r,t)=>{let n=404,s={reason:`Mock Service worker could not find mock entity versions for ID ${o.params.entityId}`};const e=y.find(i=>i.id===o.params.entityId);return e&&e.versionInfo&&(s={results:e.versionInfo},n=200),r(t.status(n),t.json(s))}),m.rest.get(`${d}${$(":entityId",":versionNumber")}`,async(o,r,t)=>{let n=404;const s=o.params.entityId,e=o.params.versionNumber.toString(),i=parseInt(e);let a={reason:`Mock Service worker could not find a mock versioned entity with ID ${s}.${e}`};const u=y.find(p=>p.id===o.params.entityId);return u&&u.versions&&u.versions[i]&&(a=u.versions[i],n=200),r(t.status(n),t.json(a))}),m.rest.post(`${d}${l(":entityId")}`,async(o,r,t)=>{let n=404,s={reason:`Mock Service worker could not find a mock entity bundle with ID ${o.params.entityId}`};const e=y.find(i=>i.id===o.params.entityId);return e!=null&&e.bundle&&(s=e.bundle,n=200),r(t.status(n),t.json(s))}),m.rest.post(`${d}${l(":entityId",":versionNumber")}`,async(o,r,t)=>{const n=o.params.entityId,s=parseInt(o.params.versionNumber);let e=404,i={reason:`Mock Service worker could not find a mock entity bundle with ID ${n}`};const a=y.find(u=>u.id===n);if(a){const u=a.bundle;a.versions&&a.versions[s]?i={...u,entity:a.versions[s]}:i=u,e=200}return r(t.status(e),t.json(i))}),m.rest.get(`${d}${v(":entityId")}`,async(o,r,t)=>r(t.status(200),t.json(j))),m.rest.get(`${d}${N(":entityId")}`,async(o,r,t)=>{let n=404,s={reason:`Mock Service worker could not find a mock entity bundle with ID ${o.params.entityId}`};const e=y.find(i=>i.id===o.params.entityId);return e!=null&&e.json&&(s=e.json,n=200),r(t.status(n),t.json(s))}),m.rest.post(`${d}${D}`,async(o,r,t)=>{let n=404,s={reason:`Mock Service worker could not find a mock entity bundle with ID ${o.params.entityId}`};const e=o.body,i=y.filter(a=>e.references.find(u=>u.targetId===a.id)).map(a=>a.entityHeader).filter(a=>!!a);return i&&(s={results:i},n=200),r(t.status(n),t.json(s))}),m.rest.get(`${d}${c(":entityId")}/path`,async(o,r,t)=>{let n=404,s={reason:`Mock Service worker could not find a mock entity path using ID ${o.params.entityId}`};const e=y.find(i=>o.params.entityId===i.id);return e&&e.path&&(s=e.path,n=200),r(t.status(n),t.json(s))}),m.rest.get(`${d}/file/v1/entity/:id/uploadDestination`,async(o,r,t)=>{const n={banner:"",storageLocationId:1,uploadType:k.S3,concreteType:"org.sagebionetworks.repo.model.file.S3UploadDestination"};return r(t.status(200),t.json(n))}),m.rest.get(`${d}/repo/v1/projects`,async(o,r,t)=>{const n={results:E.map(s=>({name:s.name,id:s.id,lastActivity:"2024-01-04T21:11:59.000Z",modifiedBy:parseInt(s.entity.modifiedBy),modifiedOn:s.entity.modifiedOn}))};return r(t.status(200),t.json(n))})];export{A as g};
//# sourceMappingURL=entityHandlers-2cca9667.js.map
