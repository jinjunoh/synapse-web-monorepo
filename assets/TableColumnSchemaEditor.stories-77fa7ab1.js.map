{"version":3,"file":"TableColumnSchemaEditor.stories-77fa7ab1.js","sources":["../../src/components/TableColumnSchemaEditor/TableColumnSchemaEditor.tsx"],"sourcesContent":["import React, { useCallback, useMemo, useRef } from 'react'\nimport {\n  useGetEntityBundle,\n  useUpdateTableColumns,\n} from '../../synapse-queries'\nimport { SkeletonTable } from '../Skeleton'\nimport { convertToEntityType } from '../../utils/functions/EntityTypeUtils'\nimport TableColumnSchemaForm, { SubmitHandle } from './TableColumnSchemaForm'\nimport { Alert, Button, Divider } from '@mui/material'\nimport { getViewScopeForEntity } from './TableColumnSchemaEditorUtils'\nimport { ColumnModel, ViewScope } from '@sage-bionetworks/synapse-types'\nimport { Provider } from 'jotai'\nimport { SetOptional } from 'type-fest'\n\nexport type TableColumnSchemaEditorProps = {\n  entityId: string\n}\n\n/**\n * Fetches column model data for a Synapse Table and renders a form to edit the column models.\n * @param props\n * @constructor\n */\nfunction _TableColumnSchemaEditor(props: TableColumnSchemaEditorProps) {\n  const { entityId } = props\n\n  const formRef = useRef<SubmitHandle>(null)\n  const { data: bundle, isLoading } = useGetEntityBundle(\n    entityId,\n    undefined,\n    {\n      includeEntity: true,\n      includeTableBundle: true,\n    },\n    {\n      // This data is inserted into a form, so don't refetch it.\n      staleTime: Infinity,\n      useErrorBoundary: true,\n    },\n  )\n\n  const entity = bundle?.entity\n  const originalColumnModels = bundle?.tableBundle?.columnModels\n\n  const { mutate, isLoading: isMutating, error } = useUpdateTableColumns()\n\n  const onSubmit = useCallback(\n    (newColumnModels: SetOptional<ColumnModel, 'id'>[]) => {\n      // Update the table schema with the new column models.\n      mutate({\n        entityId,\n        originalColumnModels: originalColumnModels!,\n        newColumnModels: newColumnModels,\n      })\n    },\n    [entityId, mutate, originalColumnModels],\n  )\n\n  const viewScope: ViewScope | undefined = useMemo(() => {\n    if (!entity) {\n      return undefined\n    }\n    return getViewScopeForEntity(entity!)\n  }, [entity])\n\n  if (isLoading || !bundle || !entity) {\n    return (\n      <SkeletonTable\n        numRows={8}\n        numCols={7}\n        rowHeight={'50px'}\n        fullWidthCells\n      />\n    )\n  }\n\n  return (\n    <>\n      <TableColumnSchemaForm\n        ref={formRef}\n        entityType={convertToEntityType(entity.concreteType)}\n        viewScope={viewScope}\n        initialData={bundle?.tableBundle?.columnModels}\n        isSubmitting={isMutating}\n        onSubmit={formData => {\n          onSubmit(formData)\n        }}\n      />\n      <Divider />\n      {error && (\n        <Alert severity={'error'} sx={{ my: 2 }}>\n          {error?.message}\n        </Alert>\n      )}\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => {\n          if (formRef.current) {\n            formRef.current.submit()\n          }\n        }}\n        disabled={isMutating}\n        sx={{ my: 2 }}\n      >\n        {isMutating ? 'Saving...' : 'Save'}\n      </Button>\n    </>\n  )\n}\n\nexport default function TableColumnSchemaEditor(\n  props: TableColumnSchemaEditorProps,\n) {\n  // Wrap in a Jotai provider to ensure the Jotai atomic state is unique to this component tree\n  // i.e. other instances of TableColumnSchemaEditor will not share state with this instance\n  return (\n    <Provider>\n      <_TableColumnSchemaEditor {...props} />\n    </Provider>\n  )\n}\n"],"names":["_TableColumnSchemaEditor","props","entityId","formRef","useRef","bundle","isLoading","useGetEntityBundle","entity","originalColumnModels","_a","mutate","isMutating","error","useUpdateTableColumns","onSubmit","useCallback","newColumnModels","viewScope","useMemo","getViewScopeForEntity","jsx","SkeletonTable","jsxs","Fragment","TableColumnSchemaForm","convertToEntityType","_b","formData","Divider","Alert","Button","TableColumnSchemaEditor","Provider"],"mappings":"kmQAuBA,SAAAA,EAAAC,EAAA,SACE,KAAA,CAAA,SAAAC,CAAA,EAAAD,EAEAE,EAAAC,SAAA,IAAA,EACA,CAAA,KAAAC,EAAA,UAAAC,CAAA,EAAAC,EAAoCL,EAClC,OACA,CACA,cAAA,GACiB,mBAAA,EACK,EACtB,CACA,UAAA,IAEa,iBAAA,EACO,CACpB,EAGFM,EAAAH,GAAA,YAAAA,EAAA,OACAI,GAAAC,EAAAL,GAAA,YAAAA,EAAA,cAAA,YAAAK,EAAA,aAEA,CAAA,OAAAC,EAAA,UAAAC,EAAA,MAAAC,CAAA,EAAAC,IAEAC,EAAAC,EAAA,YAAiBC,GAAA,CAGbN,EAAA,CAAO,SAAAT,EACL,qBAAAO,EACA,gBAAAQ,CACA,CAAA,CACD,EACH,CAAAf,EAAAS,EAAAF,CAAA,CACuC,EAGzCS,EAAAC,EAAAA,QAAA,IAAA,CACE,GAAAX,EAGA,OAAAY,EAAAZ,CAAA,CAAoC,EAAA,CAAAA,CAAA,CAAA,EAGtC,OAAAF,GAAA,CAAAD,GAAA,CAAAG,EACEa,EACEC,EAAC,CAAA,QAAA,EACU,QAAA,EACA,UAAA,OACE,eAAA,EACG,CAAA,EAKpBC,EAAAC,EAAA,CAAA,SAAA,CAEIH,EAAAI,EAAC,CAAA,IAAAtB,EACM,WAAAuB,EAAAlB,EAAA,YAAA,EAC8C,UAAAU,EACnD,aAAAS,EAAAtB,GAAA,YAAAA,EAAA,cAAA,YAAAsB,EAAA,aACkC,aAAAf,EACpB,SAAAgB,GAAA,CAEZb,EAAAa,CAAA,CAAiB,CACnB,CAAA,EACFP,EAAAQ,EAAA,EAAA,EACShB,GAAAQ,EAAAS,EAAA,CAAA,SAAA,QAAA,GAAA,CAAA,GAAA,CAAA,EAAA,SAAAjB,GAAA,YAAAA,EAAA,OAAA,CAAA,EAIPQ,EAEFU,EAAC,CAAA,QAAA,YACS,MAAA,UACF,QAAA,IAAA,CAEJ5B,EAAA,SACEA,EAAA,QAAA,QACF,EACF,SAAAS,EACU,GAAA,CAAA,GAAA,CAAA,EACE,SAAAA,EAAA,YAAA,MAEgB,CAAA,CAC9B,CAAA,CAAA,CAGN,CAEA,SAAAoB,EAAA/B,EAAA,CAKE,OAAAoB,EAAAY,EAAA,CAAA,SAAAZ,EAAArB,EAAA,CAAA,GAAAC,EAAA,CAAA,CAAA,CAKF;;;;;;;;;;;;;;;;"}